#!/usr/bin/env ruby
require 'gli'
require 'fileutils'
begin # XXX: Remove this begin/rescue before distributing your app
require 'telApp'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/telApp` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/telApp now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version TelApp::VERSION

# Use argument validation
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Ajout d\'un contact'
arg_name 'chaine_a_inserer [fichier...]'
command :ajouter do |c|
  c.desc 'Describe a switch to ajouter'
  c.switch :s

  c.desc 'Describe a flag to ajouter'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
      nom, prenom, numero, codePostal, *fichiers = args
      fichiers << STDIN if fichiers.empty?
      
      fichiers.each do |fichier|
        MiniSed.traiter_fichier( fichier, global_options[:in_place] ) do |flux|
        MiniSed.ajouter( nom, prenom, numero, codePostal, global,flux.readlines )
      end
    end
    puts "ajouter command ran"
  end
end


desc 'Modifier un contact'
arg_name 'nomRech prenomRech numeroRech codePostalRech nom prenom numero codePostal global [fichier...]'
command :modifier do |c|
  c.action do |global_options,options,args|
    nomRech, prenomRech, numeroRech, codePostalRech, nom, prenom, numero, codePostal, *fichiers = args
      fichiers << STDIN if fichiers.empty?
      fichiers.each do |fichier|
        MiniSed.traiter_fichier( fichier, global_options[:in_place] ) do |flux|  
        MiniSed.modifier( nomRech, prenomRech, numeroRech, codePostalRech, nom, prenom, numero, codePostal, global, lignes )
      end
    end   
    puts "modifier command ran"
  end
end

desc 'Supprimer un contact'
arg_name 'nom prenom [fichier...]'
command :supprimer do |c|
  c.action do |global_options,options,args|  
    nom, prenom, *fichiers = args
    fichiers << STDIN if fichiers.empty?
    fichiers.each do |fichier|
      MiniSed.traiter_fichier( fichier, global_options[:in_place] ) do |flux|
      MiniSed.delete(nom, prenom, flux.readlines)
    puts "supprimer command ran"
      end
    end
  end
end

desc 'rechercher un contact'
arg_name 'nom prenom [fichier...]'
command :rechercher do |c|
  c.action do |global_options,options,args|
    nom, prenom, *fichiers = args
      fichiers << STDIN if fichiers.empty?
      fichiers.each do |fichier|
        MiniSed.traiter_fichier( fichier, global_options[:in_place] ) do |flux|  
        MiniSed.rechercher( nom, prenom, lignes )
      end
    end
    puts "rechercher command ran"
  end
end

desc 'Afficher le contact'
arg_name 'nom prenom [fichier...]'
command :affcher do |c|
  c.action do |global_options,options,args|
    nom, prenom, *fichiers = args
    fichiers << STDIN if fichiers.empty?
    
    fichiers.each do |fichier|
      MiniSed.traiter_fichier( fichier, global_options[:in_place] ) do |flux|
      MiniSed.print( nom, prenom, flux.readlines )
      end
    end
    puts "affcher command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
